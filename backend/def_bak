#!/usr/bin/env python3
''' Default APIs.'''
from flask import (
        request, render_template, redirect,
        url_for, flash, abort, session, Blueprint,
        current_app, make_response, jsonify
        )
# from models import db, Customers, is_safe_url
from flask_login import (
        login_user, logout_user, login_required, current_user
        )
from api.v1.views import (
        db, ServiceProviders, ServiceCategories,
        ServiceProviderServices, Countries, States, Locations,
        Reviews, Customers, is_safe_url, store
        )
from werkzeug.security import check_password_hash
from uuid import uuid4
from os import getenv
from flask_wtf.csrf import generate_csrf

# Blueprint for default apis
default_apis = Blueprint('default_apis', __name__, url_prefix='/api/v1')

testing = getenv('testing', '')


@default_apis.route("/getcsrf", methods=["GET"])
def get_csrf():
    token = generate_csrf()

    # see if it solves frontend issue
    # session['csrf_token'] = token

    response = jsonify({"detail": "CSRF cookie set"})
    response.headers.set("X-CSRFToken", token)
    return response


@default_apis.route("/getsession", methods=["GET"])
def check_session():
    if current_user.is_authenticated:
        return jsonify({"login": True})

    return jsonify({"login": False})


if testing:
    @default_apis.route('/')
    def index():
        ''' Homepage for guests.
        '''
        # for testing
        stmt = db.select(Locations)
        locations = db.session.scalars(stmt).all()
        stmt = db.select(Countries)
        countries = db.session.scalars(stmt).all()
        stmt = db.select(States)
        states = db.session.scalars(stmt).all()
        stmt = db.select(ServiceCategories)
        service_categories = db.session.scalars(stmt).all()
        return render_template(
                'base.html',
                countries=countries,
                states=states,
                locations=locations,
                service_categories=service_categories,
                n=str(uuid4())
                )


if testing:
    @default_apis.route('/login/get')
    def login_get():
        ''' Return the login form view.'''
        return render_template('login.html')


@default_apis.route('/login', methods=['POST'])
@store.csrf.exempt
def login_post():
    ''' Authenticate posted login information for both customers and SPs.
    '''
    # Retrieve provided login information
    username = request.form.get('username')
    password = request.form.get('password')
    remember = True if request.form.get('remember') else False

    '''
    # testing with JSON data
    data = request.get_json(silent=True)
    username = data.get('username')
    password = data.get('password')
    remember = True if data.get('remember') else False
    '''

    # print('############-->', username, password, remember)

    # Verify that service provider is registered
    stmt = db.select(
            ServiceProviders).where(ServiceProviders.username == username)
    row = db.session.execute(stmt).first()  # returns Row object or None
    sp = ''
    cus = ''
    if row:
        # Valid username
        sp = row[0]
    else:
        # check customers table
        stmt = db.select(Customers).where(Customers.username == username)
        row = db.session.execute(stmt).first()  # return Row object or None
        if row:
            cus = row[0]
        else:
            cus = ''

    if sp:
        cus = ''  # check_password_hash expects a countable object
    elif cus:
        sp = ''
    else:
        cus = ''
        sp = ''

    # Handle failed authentication
    if not (cus if cus else sp) or not check_password_hash(
            (sp.password if sp else cus.password), password):
        # Flash an error message to display
        flash("Invalid username and/or password", "invalid_usr_pwd")
        if testing:
            # Redirect to login page to try again
            # return redirect(url_for('sp_auth_views.sp_login'))
            pass
        return make_response(jsonify({
            "login": False,
            "reason": "invalid username and/or password"
            }), 401)

    # User exists and is authenticated
    session['account_type'] = 'service_provider' if sp else 'customer'
    login_user((sp if sp else cus), remember=remember)  # log into session
    session['csrf_token'] = generate_csrf()
    # print(f'############-->{session["csrf_token"]}')

    # Retrieve next URL, if available
    nextp = request.args.get('next')
    '''
    When a logged-out user tries to access a protected page (login_required),
    they get redirected to login, and a `next` query string parameter is
    attached to the URL of the POST login link. The value of this parameter is
    the URL the user attempted to visit before redirection.
    '''

    # Protect against Open Redirect attacks
    if not is_safe_url(nextp):
        abort(400, description="`next` URL not safe")

    if testing:
        '''
        return redirect(nextp or url_for(
            ('sp_apis.profile' if sp else 'cus_apis.profile'),
            id=sp.id if sp else cus.id
            ))
        '''
        pass

    response =  make_response(jsonify(dict(
        login=True,
        user_type=('SP' if sp else 'CUS'),
        user_id=(sp.id if sp else cus.id),
        )), 200)
    response.headers.set("X-CSRFToken", token)

    return respnse


@default_apis.route('/services')
def service_multi_post():
    ''' Returns summary data on seleted service-provider services.
        The selected services match the filters in the query string.
    '''
    # Retrieve query arguments
    country_id = int(request.args.get('country'))  # required
    state_id = request.args.get('state')
    location_id = request.args.get('location')
    sc_id = request.args.get('service_category')  # required; not anymore

    # Use filter parameters to fetch summary services data
    if not location_id:
        if not state_id:
            # use country id to filter
            if not sc_id:
                stmt = db.select(
                        ServiceProviders.first_name,
                        ServiceProviders.last_name,
                        ServiceProviders.id.label('sp_id'),
                        ServiceProviders.location_id,
                        Locations.name.label('loc_name'),
                        ServiceCategories.id.label('sc_id'),
                        ServiceCategories.name.label('sc_name'),
                        ServiceProviderServices.image_uri,
                        ServiceProviderServices.rating,
                        ServiceProviderServices.service_description,
                        ServiceProviderServices.id.label('sps_id')
                        ).select_from(ServiceProviderServices).join(
                                ServiceCategories,
                                ).join(ServiceProviders).join(Locations).join(
                                        States).join(Countries).where(
                                                Countries.id == (country_id),
                                                )
                rows_list = db.session.execute(stmt).all()
                '''
                - returns a list of Row objects representing the result set
                - since columns were selected, each row (a Python named tuple)
                  in the list will contain the column attributes requested
                - as in a named tuple, these attributes can be
                  accessed using their column/attribute name e.g. row[0].name
                '''
            else:
                # SC ID provided
                sc_id = int(sc_id)
                stmt = db.select(
                        ServiceProviders.first_name,
                        ServiceProviders.last_name,
                        ServiceProviders.id.label('sp_id'),
                        ServiceProviders.location_id,
                        Locations.name.label('loc_name'),
                        ServiceCategories.id.label('sc_id'),
                        ServiceCategories.name.label('sc_name'),
                        ServiceProviderServices.image_uri,
                        ServiceProviderServices.rating,
                        ServiceProviderServices.service_description,
                        ServiceProviderServices.id.label('sps_id')
                        ).select_from(ServiceProviderServices).join(
                                ServiceCategories,
                                ).join(ServiceProviders).join(Locations).join(
                                        States).join(Countries).where(
                                                Countries.id == country_id,
                                                ServiceCategories.id == sc_id,
                                                )
                rows_list = db.session.execute(stmt).all()
        else:
            # use state id to filter
            if not sc_id:
                stmt = db.select(
                        ServiceProviders.first_name,
                        ServiceProviders.last_name,
                        ServiceProviders.id.label('sp_id'),
                        ServiceProviders.location_id,
                        Locations.name.label('loc_name'),
                        ServiceCategories.id.label('sc_id'),
                        ServiceCategories.name.label('sc_name'),
                        ServiceProviderServices.image_uri,
                        ServiceProviderServices.rating,
                        ServiceProviderServices.service_description,
                        ServiceProviderServices.id.label('sps_id')).select_from(
                                ServiceProviderServices).join(
                                        ServiceCategories).join(
                                                ServiceProviders).join(
                                                Locations).join(States).where(
                                                States.id == int(state_id),
                                                )
                rows_list = db.session.execute(stmt).all()
            else:
                # SC ID provided
                sc_id = int(sc_id)
                stmt = db.select(
                        ServiceProviders.first_name,
                        ServiceProviders.last_name,
                        ServiceProviders.id.label('sp_id'),
                        ServiceProviders.location_id,
                        Locations.name.label('loc_name'),
                        ServiceCategories.id.label('sc_id'),
                        ServiceCategories.name.label('sc_name'),
                        ServiceProviderServices.image_uri,
                        ServiceProviderServices.rating,
                        ServiceProviderServices.service_description,
                        ServiceProviderServices.id.label('sps_id')
                        ).select_from(ServiceProviderServices).join(
                                ServiceCategories,
                                ).join(ServiceProviders).join(Locations).join(
                                        States).where(
                                                States.id == state_id,
                                                ServiceCategories.id == sc_id,
                                                )
                rows_list = db.session.execute(stmt).all()
    else:
        # use location id to filter
        if not sc_id:
            stmt = db.select(
                    ServiceProviders.first_name,
                    ServiceProviders.last_name,
                    ServiceProviders.id.label('sp_id'),
                    ServiceProviders.location_id,
                    Locations.name.label('loc_name'),
                    ServiceCategories.id.label('sc_id'),
                    ServiceCategories.name.label('sc_name'),
                    ServiceProviderServices.image_uri,
                    ServiceProviderServices.rating,
                    ServiceProviderServices.service_description,
                    ServiceProviderServices.id.label('sps_id')).select_from(
                            ServiceProviderServices).join(
                            ServiceCategories).join(
                            ServiceProviders).join(Locations).where(
                            Locations.id == int(location_id),
                            )
            rows_list = db.session.execute(stmt).all()
        else:
            # sc_id is provided
            sc_id = int(sc_id)
            stmt = db.select(
                    ServiceProviders.first_name,
                    ServiceProviders.last_name,
                    ServiceProviders.id.label('sp_id'),
                    ServiceProviders.location_id,
                    Locations.name.label('loc_name'),
                    ServiceCategories.id.label('sc_id'),
                    ServiceCategories.name.label('sc_name'),
                    ServiceProviderServices.image_uri,
                    ServiceProviderServices.rating,
                    ServiceProviderServices.service_description,
                    ServiceProviderServices.id.label('sps_id')).select_from(
                            ServiceProviderServices).join(
                            ServiceCategories).join(
                            ServiceProviders).join(Locations).where(
                            Locations.id == int(location_id),
                            ServiceCategories.id == sc_id,
                            )
            rows_list = db.session.execute(stmt).all()

    json_list = []

    for row in rows_list:
        # Prepare the data in json_serializable forms
        first_name = row.first_name
        last_name = row.last_name
        image_uri = row.image_uri
        rating = float(row.rating)  # for serializability
        description = row.service_description
        sps_id = row.sps_id
        sp_id = row.sp_id
        sc_name = row.sc_name
        sc_id = row.sc_id
        loc_name = row.loc_name
        loc_id = row.location_id

        # A dictionary representing a single unit of data
        json_data = dict(
                first_name=first_name,
                last_name=last_name,
                image_uri=image_uri,
                rating=rating,
                description=description,
                sps_id=sps_id,
                sp_id=sp_id,
                serviceCategory_name=sc_name,
                serviceCategory_id=sc_id,
                location_name=loc_name,
                location_id=loc_id
                )

        # Append to list
        json_list.append(json_data)

    return jsonify(json_list)


@default_apis.route('/services/<sps_id>')
def service_one_get(sps_id):
    ''' Returns details about a specific service-provider service.
    '''
    # Fetch service details
    stmt = db.select(
            ServiceProviders.first_name,
            ServiceProviders.last_name,
            ServiceProviders.id,
            ServiceProviders.location_id,
            Locations.name.label('loc_name'),
            ServiceCategories.id.label('sc_id'),
            ServiceCategories.name.label('sc_name'),
            ServiceProviderServices.image_uri,
            ServiceProviderServices.rating,
            ServiceProviderServices.service_description).select_from(
                    ServiceProviderServices).join(ServiceCategories).join(
                    ServiceProviders).join(Locations).where(
                    ServiceProviderServices.id == int(sps_id)
                    )
    details_row = db.session.execute(stmt).first()
    if not details_row:
        # No such service
        return make_response(
                jsonify({"status": "error", "message": "invalid sps ID"}),
                400,
                )

    # Fetch all reviews for the specified service
    stmt = db.select(
            Reviews.id,
            Reviews.review_content,
            Reviews.upvotes,
            Reviews.updated_at,
            Customers.first_name,
            Customers.last_name).join(Customers).join(
                    ServiceProviderServices).where(
                    ServiceProviderServices.id == int(sps_id)
                    )
    reviews_rows_list = db.session.execute(stmt).all()
    ''' returns list of reviews details rows.'''

    # Prepare the data in json_serializable forms
    first_name = details_row.first_name
    last_name = details_row.last_name
    image_uri = details_row.image_uri
    rating = float(details_row.rating)  # for serializability
    description = details_row.service_description
    sp_id = details_row.id
    sc_name = details_row.sc_name
    sc_id = details_row.sc_id
    loc_name = details_row.loc_name
    loc_id = details_row.location_id

    json_data = dict(
            first_name=first_name,
            last_name=last_name,
            image_uri=image_uri,
            rating=rating,
            description=description,
            serviceProvider_id=sp_id,
            serviceCategory_name=sc_name,
            serviceCategory_id=sc_id,
            location_name=loc_name,
            location_id=loc_id
            )

    # Prepare list of reviews and associated details
    reviews = []
    for reviews_row in reviews_rows_list:
        content = reviews_row.review_content
        updated_at = reviews_row.updated_at.isoformat()  # make serializable
        first_name = reviews_row.first_name
        last_name = reviews_row.last_name
        review_id = reviews_row.id
        upvotes = reviews_row.upvotes
        review_json = dict(
                review_id=review_id,
                content=content,
                customer_first_name=first_name,
                customer_last_name=last_name,
                customer_upvotes=upvotes,
                updated_at=updated_at
                )
        reviews.append(review_json)

    # Add reviews list to return data
    json_data.update({"reviews": reviews})

    return jsonify(json_data)


@default_apis.route('/countries')
def countries():
    ''' Returns info on all countries recorded in the database.
    '''
    # Retrieve all countries
    stmt = db.select(Countries)
    countries = db.session.scalars(stmt).all()

    countries_list = []
    for country in countries:
        country_json = dict(id=country.id, name=country.name)
        countries_list.append(country_json)

    return jsonify(countries_list)


@default_apis.route('/countries/<int:country_id>/states')
def country_states(country_id):
    ''' Returns all states/counties in the specified country.
    '''
    # Retrieve the country object
    country = db.session.get(Countries, country_id)
    # Retrieve all country states
    stmt = db.select(States).where(States.country_id == country_id)
    states = db.session.scalars(stmt).all()

    if country:
        json_data = dict(country_name=country.name, country_id=country_id)
    else:
        return make_response(
                jsonify({"status": "error", "reason": "invalid country ID"}),
                400,
                )

    # Compose States objects
    states_list = []
    for state in states:
        state_json = dict(id=state.id, name=state.name)
        states_list.append(state_json)

    json_data.update(states=states_list)

    return jsonify(json_data)


@default_apis.route(
        '/countries/<int:country_id>/states/<int:state_id>/locations')
def country_state_locations(country_id, state_id):
    ''' Returns all locations in the specified country and state/county.
    '''
    # Retrieve country
    country = db.session.get(Countries, country_id)
    # Fetch state
    state = db.session.get(States, state_id)

    # Validate country and state IDs
    if not country:
        return make_response(
                jsonify({"status": "error", "reason": "invalid country ID"}),
                400,
                )
    if not state:
        return make_response(
                jsonify({"status": "error", "reason": "invalid state ID"}),
                400,
                )
    if not state.country_id == country.id:
        return make_response(
                jsonify({
                    "status": "error",
                    "reason": "not a state in country"
                    }),
                400,
                )

    json_data = dict(
            country_name=country.name,
            country_id=country.id,
            state_name=state.name,
            state_id=state.id
            )

    # Retrieve all relevant locations
    stmt = db.select(Locations).where(Locations.state_id == state_id)
    locations = db.session.scalars(stmt).all()

    # Compose Locations
    locations_list = []
    for location in locations:
        location_json = dict(id=location.id, name=location.name)
        locations_list.append(location_json)

    json_data.update(locations=locations_list)

    return jsonify(json_data)


@default_apis.route('/serviceCategories')
def service_categories():
    ''' Returns all service category names and IDs.
    '''
    # Get all service category records
    stmt = db.select(ServiceCategories)
    SCs = db.session.scalars(stmt).all()

    json_list = []

    for sc in SCs:
        name = sc.name
        id = sc.id
        sc_data = dict(id=id, name=name)
        json_list.append(sc_data)

    return jsonify(json_list)
